// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id              String   @id @default(uuid())
  userId          String   @unique
  phone           String?
  level           String?
  preferredSport  String?
  preferredDays   String[]
  preferredTimes  String?
  notes           String?
  organizationId  String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  bookings        Booking[] @relation("UserBookings")
  coaching        Booking[] @relation("CoachBookings")
  progressRecords ProgressRecord[]

  @@index([userId])
  @@index([organizationId])
  @@map("profiles")
}

model Booking {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  coachId         String      @map("coach_id")
  date            DateTime
  startTime       String      @map("start_time")
  endTime         String      @map("end_time")
  type            String      @default("lesson")
  status          String      @default("upcoming")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  organizationId  String      @map("organization_id")
  user            Profile     @relation("UserBookings", fields: [userId], references: [userId])
  coach           Profile     @relation("CoachBookings", fields: [coachId], references: [userId])
  attendance      Attendance?

  @@index([userId])
  @@index([coachId])
  @@index([organizationId])
  @@index([date])
  @@map("bookings")
}

model Attendance {
  id              String      @id @default(uuid())
  bookingId       String      @unique @map("booking_id")
  status          String
  notes           String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  organizationId  String      @map("organization_id")
  booking         Booking     @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@index([organizationId])
  @@map("attendance")
}

model ProgressRecord {
  id              String      @id @default(uuid())
  profileId       String      @map("profile_id")
  date            DateTime
  notes           String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  organizationId  String      @map("organization_id")
  profile         Profile     @relation(fields: [profileId], references: [id])

  @@index([profileId])
  @@index([organizationId])
  @@index([date])
  @@map("progress_records")
}
